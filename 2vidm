// vRO Action to extract vidm names from JSON input
// Input: jsonInput (string)
// Output: Array of objects with node names and their corresponding vidm vmnames

function extractVidmNames(jsonInput) {
    // Parse the input JSON string
    var jsonObject = JSON.parse(jsonInput);

    // Function to recursively extract vidm vmnames from the JSON object
    function findVidmNames(node, parentNode, result) {
        for (var key in node) {
            if (node.hasOwnProperty(key)) {
                var value = node[key];
                if (Array.isArray(value)) {
                    value.forEach(function(item) {
                        if (item.type === 'vidm' && item.vmname) {
                            if (!result[parentNode]) {
                                result[parentNode] = [];
                            }
                            result[parentNode].push(item.vmname);
                        }
                    });
                } else if (typeof value === 'object' && value !== null) {
                    findVidmNames(value, key, result);
                }
            }
        }
    }

    // Result object to store vidm vmnames by node
    var result = {};

    // Start the extraction from the root of the JSON object
    findVidmNames(jsonObject, 'root', result);

    // Convert result object to an array of objects
    var output = [];
    for (var node in result) {
        if (result.hasOwnProperty(node)) {
            output.push({ nodeName: node, vidmNames: result[node] });
        }
    }

    return output;
}

// Example input JSON
var jsonInput = '{"xyz":{"mgmt":[{"type":"vidm","vmname":"abc"}]},"abc":{"mgmt":[{"type":"vidm","vmname":"123"}]}}';
var result = extractVidmNames(jsonInput);
System.log(JSON.stringify(result, null, 2));
